<html>
<div style="border-radius: 10px; display: flex; flex-direction: column;">
  <div style="position: relative;min-width: 1000px;">
    <div id="coverphotoCotainer" data-picture="true" style="position: absolute; height: 300px; width: 100%;">
      <img id="coverphotoItself" src="<%= userObj.coverphoto %>" style="border-top-right-radius: 10px;border-top-left-radius: 10px;position:absolute;height:100%;width: 100%;object-fit: cover;top: 0;">

      <label id="editCoverPhotobutton" style="display:none;background: #5b88e8; position: absolute;right: 20px;bottom:20px;color: white;border-radius: 5px;padding: 10px;cursor: pointer;">Edit cover
        <input id="coverPhotoInput" type="file" name="cover_photo" data-big-width="1000px" data-big-height="600px" data-small-height="300px" data-small-width="1000px" data-type-picture="coverphoto" data-heading="Crop your new cover photo" style="opacity: 0.0001;position: absolute;cursor: pointer;"></input>
      </label>

    </div>
    <div id="profilephotoCotainer" data-picture="true" style="display: flex;justify-content: center;position:relative;height: 200px; width: 200px;margin-top:150px;margin-left: 20px;">
      <img id="profilePicID" src="<%= userObj.profilepic %>" style="border-radius: 25%; object-fit: cover;width: 100%;height: 100%;">
      
      <label id="editProfilePhotobutton" style="display:none;background: #5b88e8; position: absolute;bottom: 15px;color: white;border-radius: 5px;padding: 10px;cursor: pointer;">Edit profile picture
        <input id='profilePicInput' type="file" name="profile_pic" data-big-width="500px" data-big-height="600px" data-small-height="400px" data-small-width="400px" data-type-picture="profilepic" data-heading="Crop your new profile picture" style="opacity: 0.0001;position: absolute;cursor: pointer;"></input>
      </label>

    </div>
    <div style="display: flex;padding: 0px 20px 0px 20px;">
      <div style="display: flex; flex-direction: column;">
        <span style="font-size: 22px; font-weight: bold; margin-top: 10px;"><%= userObj.fullname %></span>
        <span style="font-size: 20px; margin-top: 10px;order: 1">Email: <%= userObj.email %></span>
        <% userObj.information.forEach(item => { %>
          <% for (const prop in item) { %>
            <% if (prop === 'github') { %>
              <% if (!!item[prop].link && !!item[prop].username) { %>
                <span style="font-size: 20px; margin-top: 10px;order: 0;"><%= prop.charAt(0).toUpperCase() + prop.slice(1) %>: <a style="color: blue; font-style: italic;" href="<%= item[prop].link %>"><%= item[prop].username %></a></span>
              <% } else { %>
                <div style="order: 2;margin-top: 5px;">
                  <a id="githubLinkClicked" style="text-decoration: none; color: blue;font-size: 18px;" href="/account/settings/<%= userObj.username %>?focus=githubLinkButton&input=githubUsername">Add github</a>
                </div>
              <% } %>
            <% } %>
            <% if (prop !== 'github') { %>
              <% if (!!item[prop]) { %>
                <span style="font-size: 20px; margin-top: 10px;order: 2"><%= prop.charAt(0).toUpperCase() + prop.slice(1) %>: <%= item[prop] %></span>
              <% } else { %>
                <div style="order: 3;margin-top: 5px;">
                  <a id="<%=prop%>LinkClicked" style="text-decoration: none; color: blue;font-size: 18px;" href="/account/settings/<%= userObj.username %>?focus=locationLinkButton&input=location">Add <%= prop %></a>
                </div>
              <% } %>
            <% } %>
          <% } %>
        <% }) %>
      </div>
      <div style="flex-grow: 1;align-self: flex-end;">
        <nav>
          <ul style="display: flex;list-style-type: none;justify-content: space-around;">
            <li class="navLinks" style="font-size: 20px;font-weight: bold;cursor: pointer;">
              <a style="text-decoration: none; color: #3366FF;" href="/account/profile/<%= userObj.username %>">Profile</a>
            </li>
            <li class="navLinks" style="font-size: 20px;font-weight: bold;cursor: pointer;">
              <a style="text-decoration: none; color: lightslategray;" href="/account/resume/<%= userObj.username %>">Resume</a>
            </li>
            <li class="navLinks" style="font-size: 20px;font-weight: bold;cursor: pointer;">
              <a style="text-decoration: none; color: lightslategray;" href="/account/documentation/<%= userObj.username %>">Documentation</a>
            </li>
          </ul>
        </nav>
      </div>
    </div>
  </div>
  <hr style="margin-top: 20px;display: block;height: 1px;border: 0;border-top: 1px solid #ccc;">
</div>

<script type="text/javascript">
  
  let coverphotoCotainer = document.querySelectorAll('#coverphotoCotainer, #profilephotoCotainer').forEach(constainer => {

    constainer.addEventListener('mouseover', function () {
      
      this.lastElementChild.style.display = 'block'
    })
    constainer.addEventListener('mouseout', function () {

      this.lastElementChild.style.display = 'none'
    })

  })

  let navButtons = document.querySelectorAll('.navLinks').forEach(link => {

    link.addEventListener('mouseover', function () {
      
      link.style.opacity = '.5'
    })
    link.addEventListener('mouseout', function () {

      link.style.opacity = '1'
    })

  })

  let uploadPhoto = document.querySelectorAll('#profilePicInput, #coverPhotoInput').forEach(input => {

    input.addEventListener('change', handlePicture)
  })

  function getOrientation (file) {

    return new Promise((resolve, reject) => {

      let reader = new FileReader()

      reader.onload = function (event) {

        let view = new DataView(event.target.result)

        if (view.getUint16(0, false) != 0xFFD8) resolve(-2)

        let length = view.byteLength
        let offset = 2

        while (offset < length) {

          let marker = view.getUint16(offset, false)

          offset += 2

          if (marker == 0xFFE1) {

            if (view.getUint32(offset += 2, false) != 0x45786966) {

              resolve(-1)
            }

            let little = view.getUint16(offset += 6, false) == 0x4949

            offset += view.getUint32(offset + 4, little)

            let tags = view.getUint16(offset, little)

            offset += 2

            for (let i = 0; i < tags; i++) {
              
              if (view.getUint16(offset + (i * 12), little) == 0x0112) {

                resolve(view.getUint16(offset + (i * 12) + 8, little))
              }

            }

          } else if ((marker & 0xFF00) != 0xFF00) {

            break

          } else {

            offset += view.getUint16(offset, false)
          }
        }

        resolve(-1)
      }

    reader.readAsArrayBuffer(file.slice(0, 64 * 1024))

    }).catch(err => {

      console.log(err)
    })

  }

  function resetOrientation (image, srcOrientation) {

    return new Promise((resolve, reject) => {

      let width = image.width
      let height = image.height
      let canvas = document.createElement('canvas')
      let ctx = canvas.getContext("2d")
      
      if (4 < srcOrientation && srcOrientation < 9) {

        canvas.width = height
        canvas.height = width

      } else {

        canvas.width = width
        canvas.height = height
      }
    
      switch (srcOrientation) {
        case 2: ctx.transform(-1, 0, 0, 1, width, 0); break;
        case 3: ctx.transform(-1, 0, 0, -1, width, height ); break;
        case 4: ctx.transform(1, 0, 0, -1, 0, height ); break;
        case 5: ctx.transform(0, 1, 1, 0, 0, 0); break;
        case 6: ctx.transform(0, 1, -1, 0, height , 0); break;
        case 7: ctx.transform(0, -1, -1, 0, height , width); break;
        case 8: ctx.transform(0, -1, 1, 0, 0, width); break;
        default: break;
      }

      ctx.drawImage(image, 0, 0)

      resolve(canvas.toDataURL('image/jpeg'))

    }).catch(err => {

      console.log(err)
    })

  }

  function handlePicture () {

    console.log('rann')

    console.log(this.value)

    let imageFile = this.files[0]

    getOrientation(imageFile).then(result => {

      return new Promise((resolve, reject) => {

        let image = new Image()

        image.onload = function () {

          resolve({
            image: image,
            orientation: result
          })
        }

        image.src = URL.createObjectURL(imageFile)
      })

    }).then(results => {

      return resetOrientation(results.image, results.orientation)

    }).then(fixedImage => {

      console.log('ran')

      let body = document.body
      let newContainer = document.createElement('div')
      let centerCropContainer = document.createElement('div')
      let headingContainer = document.createElement('div')
      let containerHeading = document.createElement('h1')
      let closeButton = document.createElement('i')
      let hr = document.createElement('hr')
      let pictureContainer = document.createElement('div')
      let previewImage = document.createElement('img')
      let submitButton = document.createElement('span')

      let styleObject = {
        newContainer: {
          'display': 'flex',
          'justify-content': 'center',
          'align-items':'center',
          'width': '100%',
          'height': '100%',
          'background-color': 'rgba(0, 0, 0, 0.5)',
          'position': 'fixed',
          'top': '0',
          'z-index': '999'
        },
        centerCropContainer: {
          'width': this.dataset.bigWidth,
          'height': this.dataset.bigHeight,
          'display': 'flex',
          'flex-direction': 'column',
          'justify-content': 'space-between',
          'align-items': 'center',
          'background': '#f0f3f4',
          'border-radius': '10px',
        },
        headingContainer: {
          'width': '100%',
          'display': 'flex',
          'justify-content':'space-between',
          'align-items':'center',
          'margin-top': '20px',
          'padding-left':'20px',
          'padding-right':'20px'
        },
        containerHeading: {
          'font-size': '23px',
        },
        closeButton: {
          'font-size':'21px',
          'cursor':'pointer'
        },
        hr: {
          'margin-top': '20px',
          'margin-bottom': '20px',
          'display': 'block',
          'height': '1px',
          'border': '0',
          'border-top': '1px solid #ccc',
          'padding': '0', 
          'width': '100%'
        },
        pictureContainer: {
          'height': this.dataset.smallHeight,
          'width': this.dataset.smallWidth,
          'overflow':'hidden',
          'position':'relative',
        },
        previewImage: {
          'width': '100%',
          'position':'absolute',
          'cursor':'pointer',
          'top': '0px'
        },
        submitButton: {
          'display': 'block',
          'background': '#5b88e8',
          'color': 'white',
          'font-size': '20px',
          'border-radius': '5px',
          'padding': '10px',
          'margin-bottom': '20px',
          'margin-right': '20px',
          'cursor': 'pointer',
          'align-self': 'flex-end'
        }
      }

      for (const prop in styleObject) {

        for (const innerProp in styleObject[prop]) {

          switch (prop) {
            case 'newContainer': newContainer.style[innerProp] = styleObject[prop][innerProp]; break;
            case 'centerCropContainer': centerCropContainer.style[innerProp] = styleObject[prop][innerProp]; break;
            case 'headingContainer': headingContainer.style[innerProp] = styleObject[prop][innerProp]; break;
            case 'containerHeading': containerHeading.style[innerProp] = styleObject[prop][innerProp]; break;
            case 'closeButton': closeButton.style[innerProp] = styleObject[prop][innerProp]; break;
            case 'hr': hr.style[innerProp] = styleObject[prop][innerProp]; break;
            case 'pictureContainer': pictureContainer.style[innerProp] = styleObject[prop][innerProp]; break;
            case 'previewImage': previewImage.style[innerProp] = styleObject[prop][innerProp]; break;
            case 'submitButton': submitButton.style[innerProp] = styleObject[prop][innerProp]; break;
          }
        }
      }

      containerHeading.innerText = this.dataset.heading
      closeButton.className = 'fa fa-times'
      previewImage.src = fixedImage
      submitButton.innerText = 'Submit Photo'
      this.newContainer = newContainer

      body.appendChild(newContainer)
      newContainer.appendChild(centerCropContainer)
      centerCropContainer.appendChild(pictureContainer)
      centerCropContainer.insertBefore(headingContainer, pictureContainer)
      headingContainer.appendChild(containerHeading)
      headingContainer.appendChild(closeButton)
      centerCropContainer.insertBefore(hr, pictureContainer)
      centerCropContainer.appendChild(hr.cloneNode(true))
      centerCropContainer.appendChild(submitButton)
      pictureContainer.appendChild(previewImage)

      previewImage.addEventListener('mousedown', grabImage)
      previewImage.addEventListener('mousemove', moveImage)
      previewImage.addEventListener('mouseup', dropOrCancel)
      previewImage.addEventListener('mouseout', dropOrCancel)

      closeButton.addEventListener('click', deleteAll.bind(this))
      submitButton.addEventListener('click', cropAndSave.bind(this))

      this.value = null

    }).catch(err => {

      console.log(err)
    })

  }

  let draggableImage = null
  var image
  let imageContainerHeight
  let maxHeight
  let topInterger
  let offsetY
  let coordY

  function deleteAll () {

    this.newContainer.parentNode.removeChild(this.newContainer)
  }

  function grabImage (e) {

    e.preventDefault()

    draggableImage = true
    coordY = parseInt(this.style.top)
    offsetY = e.clientY
    imageContainerHeight = parseInt(this.parentElement.style.height, 10)
    maxHeight = this.height - 400
  }

  function moveImage (e) {

    e.preventDefault()

    if (!!draggableImage) {

      topInterger = parseInt(coordY + e.clientY - offsetY, 10)
      
      let value = Math.abs(topInterger)
      let bottomIteger = imageContainerHeight + value

      if (topInterger >= 0 || (bottomIteger >= this.height)) {

        if (topInterger > 0) { topInterger = 0 }
        else if (value > maxHeight) { topInterger = -Math.abs(maxHeight) }

        draggableImage = null

        return

      } else {

        this.style.top = coordY + e.clientY - offsetY + 'px'
      }
    }
  }

  function dropOrCancel (e) {

    e.preventDefault()

    draggableImage = null

    image = this
  }

  function cropAndSave () {

    return new Promise((resolve, reject) => {

      let canvas = document.createElement('canvas')
      let ctx = canvas.getContext("2d")

      canvas.width = parseInt(this.dataset.smallWidth, 10)
      canvas.height = parseInt(this.dataset.smallHeight, 10)
    
      ctx.drawImage(image, 0, topInterger, image.width, image.height)

      resolve(canvas.toDataURL('image/jpeg'))
      
    }).then(results => {

      let finalImage = document.createElement('img')

      finalImage.src = results

      return finalImage

    }).then(results => {

      fetch('http://localhost/account/update/uploadPhoto', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
          imagebase64: results.src,
          type: this.dataset.typePicture
        })
      }).then(results => {

        return results.json()

      }).then(resultsJson => {

        console.log(resultsJson)

      })

    }).catch(err => {

      console.log(err)
    })

  }

</script>